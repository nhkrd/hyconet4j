/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'project-report'

version = '2.1.0'
sourceCompatibility = '1.8' // -source
targetCompatibility = '1.8' // -target

ext {
    versionCode = 20210907
}
repositories {
    mavenCentral()
    maven {
        url "http://www.cybergarage.org:8080/maven/repo"
    }
}

dependencies {

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'

    ////// Upnp Jar Package ////////
    // http://www.cybergarage.org:8080/maven/repo
    // if this privateRepository is available, download jar package from its repository
    //compile group: 'org.cybergarage.upnp', name:'cybergarage-upnp-core', version: '2.1.1'

    // if this privateRepository is not available, download sourcecode from github and compile it with 'maven install'
    compile files('src/main/libs/cybergarage-upnp-core-2.1.1.jar')

    compile group: 'io.netty', name: 'netty-common', version: '4.1.48.Final'

    // https://mvnrepository.com/artifact/io.netty/netty-codec
    compile group: 'io.netty', name: 'netty-codec', version: '4.1.48.Final'

    // https://mvnrepository.com/artifact/io.netty/netty-codec-http
    compile group: 'io.netty', name: 'netty-codec-http', version: '4.1.48.Final'

    // https://mvnrepository.com/artifact/io.netty/netty-buffer
    compile group: 'io.netty', name: 'netty-buffer', version: '4.1.48.Final'

    // https://mvnrepository.com/artifact/io.netty/netty-transport
    compile group: 'io.netty', name: 'netty-transport', version: '4.1.48.Final'

    // https://mvnrepository.com/artifact/io.netty/netty-resolver
    compile group: 'io.netty', name: 'netty-resolver', version: '4.1.48.Final'

// https://mvnrepository.com/artifact/xerces/xercesImpl
compile group: 'xerces', name: 'xercesImpl', version: '2.12.0'

    // local jar
    // Original jar package: https://mvnrepository.com/artifact/org.json/json
    //compile group: 'org.json', name: 'json', version: '20170220'

    // Because of jar package name confliction with the similar pacakge in Android SDK, use this jar package as another package name : JSON-java
    // , so that change package name in the original source and compile it
    compile files('src/main/libs/JSON-java-20170220.jar')

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

apply plugin: 'application'

mainClassName = 'jp.or.nhk.rd.hyconet4j'

distZip {
    baseName = 'jp.or.nhk.rd.hyconet4j'
}

startScripts {
    applicationName = 'hyconet4j'
}

/*
*  task
*/

defaultTasks 'clean', 'compileJava','classes', 'jar', 'distZip','copyDependencies', 'copyBuildJar', 'javadoc'

compileJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = "UTF-8"
}

compileTestJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
   options.encoding = "UTF-8"
}


//task copyDependencies(dependsOn: 'jar', type:Copy) {
task copyDependencies (dependsOn: 'jar'){
    delete 'libs'
    doLast {
        println 'Task:copyDependencies'
        new File('libs').mkdirs()
        copy {
            from configurations.compile
            into './libs'
        }
	}
}

task copyBuildJar(dependsOn: ':copyDependencies') {
    doLast {
        println 'Task:copyBuildJar To libs, sample/libs'
        copy {
            from './build/libs'
            into './libs'
        }

        project.delete file('sample/libs').listFiles().findAll{it.name.startsWith('hyconet4j')}
        copy {
            from './build/libs'
            into './sample/libs'
        }
	}
}
