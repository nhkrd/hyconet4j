/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'project-report'

version = 'sample-v2.1'
sourceCompatibility = '1.8' // -source
targetCompatibility = '1.8' // -target

ext {
    sdkversion = '2.1.0'
}

sourceSets {
    main {
        java {
            srcDirs = ['./']
        }
    }
    test {
        java {
            srcDirs = ['./test']
        }
    }
}

buildDir = 'build'

repositories {
    mavenCentral()
    maven {
        //url "http://www.cybergarage.org:8080/maven/repo"
        url "https://jitpack.io"

    }
}

dependencies {

    // Hyconet4j dependencies
    //
    //
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'

   ////// Upnp Jar Package ////////
    // http://www.cybergarage.org:8080/maven/repo
    // if this privateRepository is available, download jar package from its repository
    //compile group: 'org.cybergarage.upnp', name:'cybergarage-upnp-core', version: '2.1.1'

    // if this privateRepository is not available, download sourcecode from github and compile it with 'maven install'
    compile files('./src/libs/cybergarage-upnp-core-2.1.1.jar')


    // https://mvnrepository.com/artifact/io.netty/netty-common
    compile group: 'io.netty', name: 'netty-common', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-common-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/io.netty/netty-codec
    compile group: 'io.netty', name: 'netty-codec', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-codec-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/io.netty/netty-codec-http
    compile group: 'io.netty', name: 'netty-codec-http', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-codec-http-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/io.netty/netty-buffer
    compile group: 'io.netty', name: 'netty-buffer', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-buffer-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/io.netty/netty-transport
    compile group: 'io.netty', name: 'netty-transport', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-transport-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/io.netty/netty-resolver
    compile group: 'io.netty', name: 'netty-resolver', version: '4.1.48.Final'
    //compile files('src/main/libs/netty-resolver-4.1.48.Final.jar')

    // https://mvnrepository.com/artifact/com.mashape.unirest/unirest-java
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'

    // local jar
    compile fileTree(dir: './libs', includes: ['*.jar'])

    //Just For CLItool dependencies
    //
    //
    compile group: 'com.github.everit-org.json-schema', name: 'org.everit.json.schema', version: '1.9.1'


    // Use JUnit test framework
    //
    //compile group: 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/junit/junit
    compile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    //testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'


}

apply plugin: 'application'

mainClassName = 'hyconet4j-sample'

clean {
    delete 'build'
    delete 'exlibs'
    delete '*.class'
}

distZip {
    baseName = 'hyconet4j-sample'
}

startScripts {
    applicationName = 'hyconet4j-sample'
}



/*
*  task
*/

defaultTasks 'clean', 'copyBuildJar', 'compileJava','classes','copyDependencies', 'copyClass'

compileJava {
    options.warnings = true
    options.deprecation = false
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}


//task copyDependencies(dependsOn: 'jar', type:Copy) {
task copyDependencies {
    doLast {
        println 'Task:copyDependencies'
        new File('exlibs').mkdirs()
        copy {
            from configurations.compile
            into './exlibs'
        }
	}
}

task copyClass{
    doLast {
        println 'Task:copyClasses'
        copy {
            from "${buildDir}/classes/java/main"
            into './'
        }
    }
}

task copyBuildJar(dependsOn: ':copyDependencies') {
    doLast {
        println 'Task:copyBuildJar'
        new File('libs').mkdirs()
        copy {
            from '../libs'
            into './libs'
        }
	}
}
